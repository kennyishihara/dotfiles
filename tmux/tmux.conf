# Inspired by theopn https://github.com/theopn/dotfiles/tree/main/wezterm

# {{{ Basic settings 
set -g default-terminal "$TERM" # "xterm-256color" or "tmux-256color" works too
set -ga terminal-overrides ",xterm-256color:RGB" # $TERM = xterm-256color, enable RGB color no matter what
set -g mouse on
set -g allow-rename off # do not let external program rename your custom window name
set -g history-limit 10000
set -g base-index 1 # Oh no anti programmer behavior oh no
set -g escape-time 50 # Default 500 milsec, because back in the day escape sequence blah blah
set-window-option -g pane-base-index 1
# }}}

# {{{ Keybindings
# bind or bind-key: Bind key
# bind -n: Bind without prefix
# bind -r: Execute functionality multiple times with multiple key presses (w/o retyping prefix)
# Source code where the default keys are defined:
# https://github.com/tmux/tmux/blob/master/key-bindings.c#L349

# Fav default bindings:
# "bind -N 'Break pane to a new window' ! { break-pane }",
# "bind -N 'Select window 0' 0 { select-window -t:=0 }",
# "bind -N 'Select window 1' 1 { select-window -t:=1 }",
# ...
# "bind -N 'Select window 9' 9 { select-window -t:=9 }",
# "bind -N 'Prompt for a command' : { command-prompt }",
# "bind -N 'Select the next pane' o { select-pane -t:.+ }",
# "bind -N 'Choose a window from a list' w { choose-tree -Zw }",
# "bind -N 'Zoom the active pane' z { resize-pane -Z }",

# Unbinds
unbind-key C-b # "bind -N 'Send the prefix key' C-b { send-prefix }",
unbind '"' # "bind -N 'Split window vertically' '\"' { split-window }",
unbind % # "bind -N 'Split window horizontally' % { split-window -h }",
unbind & # "bind -N 'Kill current window' & { confirm-before -p\"kill-window #W? (y/n)\" kill-window }",
unbind - # "bind -N 'Delete the most recent paste buffer' - { delete-buffer }",
unbind . # "bind -N 'Move the current window' . { command-prompt -T target { move-window -t '%%' } }",
unbind ? # "bind -N 'List key bindings' ? { list-keys -N }",
unbind [ # "bind -N 'Enter copy mode' [ { copy-mode }",
unbind ] # "bind -N 'Paste the most recent paste buffer' ] { paste-buffer -p }",
unbind c # "bind -N 'Create a new window' c { new-window }",
unbind l # "bind -N 'Select the previously current window' l { last-window }",
unbind m # "bind -N 'Toggle the marked pane' m { select-pane -m }",
unbind q # "bind -N 'Display pane numbers' q { display-panes }",
unbind t # "bind -N 'Show a clock' t { clock-mode }",
unbind r # "bind -N 'Redraw the current client' r { refresh-client }",
unbind s # "bind -N 'Choose a session from a list' s { choose-tree -Zs }",
unbind x # "bind -N 'Kill the active pane' x { confirm-before -p\"kill-pane #P? (y/n)\" kill-pane }",
unbind '{' # "bind -N 'Swap the active pane with the pane above' '{' { swap-pane -U }",
unbind '}' # "bind -N 'Swap the active pane with the pane below' '}' { swap-pane -D }",
unbind z

# Reloading
bind C-r source-file ~/.config/tmux/tmux.conf \; display-message "Reloading tmux.conf"

# Prefix
# set -g prefix C-b
# bind-key C-b send-prefix # C-b C-b sends C-b
set -g prefix C-a
bind-key C-a send-prefix

# Pane
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind C-h swap-pane -U
bind C-l swap-pane -D

# Pane splits: tmux def of vertical and horizontal split is opposite of Vim
bind s split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"

# Moving panes between windows
# ":1": Pane 1, "1": Session 1
bind C-s command-prompt -p "Send pane to:"  "join-pane -t :'%%'"
bind C-j command-prompt -p "Join pane from:"  "join-pane -s :'%%'"

# Windows
bind t new-window -c "#{pane_current_path}"
# Remove killing window since killing pane can replace its job
bind q confirm-before -p "Kill pane #P? (y/n)" kill-pane
bind [ previous-window
bind ] next-window
bind '{' swap-window -t :-1 \; previous-window
bind '}' swap-window -t :+1 \; next-window
bind m command-prompt -T target { move-window -t '%%' }
# Delete colon and type session name to move across sessions
#bind m command-prompt -I":" "move-window -t '%%' \; select-window -t '%%'"

# Open this config as a helpdoc since list-keys does not work for custom keys
bind ? display-popup -E -h 70% -w 70% "cat ~/.tmux.conf | less" # -E for exec
# }}}

# {{{ Copy mod
bind c copy-mode

set-window-option -g mode-keys vi

# $ tmux list-keys | grep "send-keys -X cancel"
# shows that ESC is bound to canc in copy-mode but not in copy-mode-vi
# Copy mode uses} a separate command sets, so we have to use send-keys -X
bind -T copy-mode-vi Escape send-keys -X cancel

unbind -T copy-mode-vi Space;
bind -T copy-mode-vi v send-keys -X begin-selection
unbind -T copy-mode-vi Enter;
bind -T copy-mode-vi y send-keys -X copy-selection
# }}}

# {{{ Dracula color scheme
DRACULA_BG=#282a36
DRACULA_CURR_LINE=#44475a
DRACULA_FG=#f8f8f2
DRACULA_COMMENT=#6272a4
DRACULA_CYAN=#8be9fd
DRACULA_GREEN=#50fa7b
DRACULA_ORANGE=#ffb86c
DRACULA_PINK=#ff79c6
DRACULA_PURPLE=#bd93f9
DRACULA_RED=#ff5555
DRACULA_YELLOW=#f1fa8c

set -g pane-border-style fg=$DRACULA_COMMENT
set -g pane-active-border-style fg=$DRACULA_ORANGE
set -g message-style bg=$DRACULA_CURR_LINE,fg=$DRACULA_CYAN
# }}}

# {{{ Status bar settings
set -g status on
set -g status-position top
set -g status-keys vi
set -g status-interval 3 # Update status bar every 3 seconds
set -g status-style bg=$DRACULA_BG,fg=$DRACULA_FG

# Left side of the status bar
set -g status-left-style default
set -g status-left-length 30
set -g status-left "  "
set -ga status-left "#[fg=$DRACULA_PINK]  #{?client_prefix,#[fg=yellow]PREFIX,#S}" # -a for appending, ? for conditional, #S is session name
set -ga status-left "#[fg=$DRACULA_COMMENT] | "

# Right side of the status bar
set -g status-right ""
set -g status-right-length 100
set -ga status-right "#[fg=$DRACULA_ORANGE]󰉋 #(basename #{pane_current_path})" # Using bash's basename command
set -ga status-right "#[fg=$DRACULA_COMMENT] | "
set -ga status-right "#[fg=$DRACULA_GREEN]  #{pane_current_command}"
set -ga status-right "#[fg=$DRACULA_COMMENT] | "
set -ga status-right "#[fg=$DRACULA_RED]  #h" # Host name (#H for host name with domain)
set -ga status-right "#[fg=$DRACULA_COMMENT] | "
# $uptime returns
#  8:27  up 1 day, 17:06, 1 user, load averages: 1,01 0,87 0,79 (Mac)
#  1:33  up  2:37, 1 user, load averages: 1.75 1.74 1.65 (Mac)
# 01:35:06 up 291 days, 16:08, 201 users,  load average: 4.14, 4.76, 5.48 (Debian)
# grep -ohe (o for printing only the matching part, e for egrep, h for no file name printing - not necessary)
# sed to remove ,
# awk to print out second and third column
# Now this introduces a problem, mainly if the uptime is before 18 hours, Mac prints HH:MM, x user... format
# So it will print out HH:MM x briefly (for 18 hours) after you turn on the computer. But well, deal with it Theo
set -ga status-right "#[fg=$DRACULA_PURPLE] up: #(uptime | grep -ohe 'up .*' | sed 's/,//g' | awk '{ print $2\" \"$3 \" \" }')"
set -ga status-right "#[fg=$DRACULA_COMMENT]| "
set -ga status-right "#[fg=$DRACULA_YELLOw]󰥔 %H:%M"
set -ga status-right "  "

# Window list
set -g status-justify left # position of window list: left, right, centre
# Current window
set -g window-status-current-format "#[bg=$DRACULA_ORANGE,fg=$DRACULA_CURR_LINE] *#I: #W "
# Inactive window
set -g window-status-format "#[bg=$DRACULA_COMMENT,fg=$DRACULA_CURR_LINE] #I: #W "
# }}}

